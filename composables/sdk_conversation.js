const https = require("https");
const { Client } = require("@twilio/conversations");

const USER_1_IDENTITY = "user1";
const USER_1_PASSWORD = undefined;

console.error("Please set USER_1_PASSWORD to the password for user1");
console.error(
  "Password can be retrieved from the sample auth service /login function."
);
console.error("See https://console.twilio.com/us1/develop/functions/editor/ZS699457751f4a89332d2179ad622a1971/environment/ZE9ac8dc17835ed60a1d89bc3eb6bfae5e/function/ZHba08b0541a81d5c48f9058cc9201e25c");
process.exit(1);

const demoConversationsSdk = async (client) => {
  let conversation = await client.createConversation({
    friendlyName: "Demo Conversation",
  });
  console.log("Created a new conversation:", conversation.sid);

  conversation.on("participantJoined", (state) => {
    // fired when a participant has joined the conversation
    console.log("Triggered Participant joined: ", state.sid);
  });
  conversation.on("messageAdded", (message) =>
    console.log("Triggered message added: ", message.state.body)
  );

  // add chat participant to the conversation by its identity
  await conversation.add(USER_1_IDENTITY);

  // add a sms participant to the conversation
  /*const proxyAddress = "+12222222222";
  const address = "+1234567890";
  await conversation.addNonChatParticipant(proxyAddress, address);*/

  //Adding Whatsapp Participant to the conversation
  /*const proxyAddress = "whatsapp:+11234567890";
  const address = "whatsapp:+12222233333";
  conversation.addNonChatParticipant(proxyAddress, address);*/

  console.log("Sending a test message to the conversation");
  await conversation
    .prepareMessage()
    .setBody("Hello!")
    .setAttributes({ foo: "bar" })
    .build()
    .send();

  let paginator = await conversation.getMessages(30, 0, "backwards");
  const messagesSoFar = paginator.items;
  console.log(
    "Conversation has these messages",
    messagesSoFar.map((m) => m.state.body)
  );

  process.exit(0);
};

const initializeClient = (token) => {
  //Create a Twilio client
  const client = new Client(token);

  client.on("connectionStateChanged", (state) => {
    console.log("Client connection state changed to ", state);
  });

  client.on("stateChanged", (state) => {
    console.log("Client state changed to ", state);
  });

  // Before you use the client, subscribe to the 'initialized' event.
  client.on("initialized", () => {
    return demoConversationsSdk(client);
  });

  // To catch client initialization errors, subscribe to the 'initFailed' event.
  client.on("initFailed", ({ error }) => {
    console.log("Failed to initialize the client:", error);
  });
};

const getTokenData = JSON.stringify({
  identity: USER_1_IDENTITY,
  password: USER_1_PASSWORD,
});
console.log("Requesting token for user...");
const getTokenReq = https.request(
  {
    host: "chattryoutautogeneratedauthservice-4721.twil.io",
    method: "POST",
    port: 443,
    path: "/login",
    headers: {
      "Content-Type": "application/json",
      "Content-Length": Buffer.byteLength(getTokenData),
    },
  },
  (response) => {
    response.setEncoding("utf8");
    response.on("data", function (token) {
      console.log("Received token", token);
      initializeClient(token);
    });
  }
);

getTokenReq.write(getTokenData);
getTokenReq.end();
